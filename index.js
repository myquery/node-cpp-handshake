const express = require('express');
const path = require('path');
const fs = require('fs');
const multer = require('multer');
const base64_decode = require('./build/Release/decode-base64.node');

const app = express();
const port = process.env.PORT || 8000;

app.use(express.json());

// Ensure necessary directories exist
const uploadsDir = path.join(__dirname, 'uploads');
const decodedDir = path.join(__dirname, 'decoded');
const tempDir = path.join(__dirname, 'temp');
const imagesDir = path.join(__dirname, 'images');

[uploadsDir, decodedDir, tempDir, imagesDir].forEach((dir) => {
    if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir); // Create directory if it doesn't exist
    }
});

// Multer setup for file upload
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, uploadsDir); // Store files in the 'uploads' directory
    },
    filename: function (req, file, cb) {
        const fileExtension = '.b64';
        const fileNameWithoutExtension = path.parse(file.originalname).name.replace(/\s+/g, "");
        cb(null, fileNameWithoutExtension);
    }
});

const upload = multer({ storage: storage });

app.use(express.static(path.join(__dirname, 'public')));

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Function to save Base64 as an image
function saveBase64Image(base64String, outputFilePath) {
    // Remove the data URL prefix if present
    const base64Data = base64String.replace(/^data:image\/\w+;base64,/, '');

    // Decode Base64 string
    const binaryData = Buffer.from(base64Data, 'base64');

    // Write the binary data to the output file
    fs.writeFileSync(outputFilePath, binaryData);

    console.log(`Image saved to ${outputFilePath}`);
}

app.post('/upload', upload.single('file'), (req, res) => {
    if (!req.file) {
        return res.status(400).send('No file uploaded.');
    }

    const uploadedFileName = req.file.filename.replace(/\.b64/g, ""); // File name generated by multer
    const filePath = path.join(uploadsDir, uploadedFileName);
    console.log({uploadedFileName})

    const outputFile = path.join(decodedDir, `decoded_${uploadedFileName}.bin`);
    const tempInputFile = path.join(tempDir, `temp_${uploadedFileName}`);
    const finalImageFile = path.join(imagesDir, `decoded_${uploadedFileName}.png`);

    try {
        // Read the uploaded file and convert to Base64
        const fileBuffer = fs.readFileSync(filePath);
        const base64Content = fileBuffer.toString('base64');

        // Write Base64 content to a temporary file
        fs.writeFileSync(tempInputFile, base64Content);

        console.log(`Decoding ${uploadedFileName}...`);
        base64_decode.decodeFile(tempInputFile, outputFile);

        // Read the decoded binary file and save it as an image
        const decodedBuffer = fs.readFileSync(outputFile);
        const base64ImageString = decodedBuffer.toString('base64');

        // Save the image using the saveBase64Image function
        saveBase64Image(base64ImageString, finalImageFile);

        // Clean up the temporary file
        fs.unlinkSync(tempInputFile);

        res.send(`File ${uploadedFileName} decoded and fingerprint image saved as ${finalImageFile}`);
    } catch (err) {
        console.error(`Error decoding ${uploadedFileName}:`, err.message);
        res.status(500).send(`Error decoding ${uploadedFileName}: ${err.message}`);
    }
});

app.listen(port, () => {
    console.log(`Listening on port ${port}`);
});
